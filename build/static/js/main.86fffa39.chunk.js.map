{"version":3,"sources":["Components/Login.tsx","Components/YotubeBox/YoutubeBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useState","time","setTime","playing","volume","ref","React","createRef","className","url","controls","light","loop","muted","progressInterval","onProgress","current","getCurrentTime","undefined","createContext","name","App","Login","YoutubeBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAEe,G,YAAA,kBACf,2C,uBCEe,aAAO,IAAD,EACKA,mBAAS,GADd,mBACZC,EADY,KACNC,EADM,OAEWF,oBAAS,GAFpB,mBAEZG,EAFY,aAGSH,mBAAS,IAHlB,mBAGZI,EAHY,aAIOJ,oBAAS,IAJhB,mBAMbK,GANa,UAMPC,IAAMC,aAElB,OACE,oCACE,6BACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CACEH,IAAKA,EACLG,UAAU,eACVC,IAAI,+BACJN,QAASA,EACTO,UAAU,EACVC,OAAO,EACPC,MAAM,EACNR,OAAQA,EACRS,OAAO,EACPC,iBAAkB,IAClBC,WAAY,WAAO,IAAD,EACVd,EAAI,UAAGI,EAAIW,eAAP,aAAG,EAAaC,sBACbC,IAATjB,GAAoBC,EAAQD,OAfxC,SAmBSA,EAnBT,QCVqBK,IAAMa,cAAc,CAACC,KAAO,WAkBxCC,MAhBf,WACG,OACC,yBAAKb,UAAU,OACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iCACb,yCACA,kBAACc,EAAD,OAEF,6BACA,kBAACC,EAAD,MACA,gCCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86fffa39.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => (\n<button>\n  Login\n</button>\n);","import React from \"react\";\nimport ReactPlayer, { ReactPlayerProps } from \"react-player\";\nimport getCurrenTime from \"react-player\";\nimport { useState } from \"react\";\n\nexport default () => {\n  const [time, setTime] = useState(0);\n  const [playing, setPlaying] = useState(true);\n  const [volume, setVolume] = useState(1);\n  const [muted, setMuted] = useState(true);\n\n  const ref = React.createRef<ReactPlayer>();\n\n  return (\n    <>\n      <div>\n        <div className=\"player-wrapper\">\n          <ReactPlayer\n            ref={ref}\n            className=\"react-player\"\n            url=\"https://youtu.be/PHe0bXAIuk0\"\n            playing={playing}\n            controls={true}\n            light={false}\n            loop={false}\n            volume={volume}\n            muted={false}\n            progressInterval={100}            \n            onProgress={() => {\n              const time = ref.current?.getCurrentTime();\n              if (time !== undefined) setTime(time)\n            }}\n          />\n        </div>\n        time: {time} s\n      </div>\n    </>\n  );\n};\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Login from './Components/Login';\nimport YoutubeBox from './Components/YotubeBox/YoutubeBox';\n\nexport const UserContext = React.createContext({name : \"Boomer\"});\n\nfunction App() {\n   return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <nav className=\"navbar navbar-dark bg-primary\">\n          <h2>Clue.to! {}</h2>\n          <Login />\n        </nav>\n        <hr></hr>        \n        <YoutubeBox />\n        <hr></hr>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}