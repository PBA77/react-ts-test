{"version":3,"sources":["Components/Login.tsx","Components/Counter.tsx","Components/BetterCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["type","className","Counter","props","state","msg","boom","bind","this","setState","setTimeout","onClick","role","Component","useState","message","setMessage","isClosing","setIsClosing","useEffect","timerID","clearTimeout","App","Login","BetterCounter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qLAEe,G,YAAA,kBACb,4BAAQA,KAAK,SAASC,UAAU,gBAAhC,a,mCCKWC,EAAb,kDAQE,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IAEDC,MAAQ,CACXC,IAAK,IAEP,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBANa,EAR7B,mDACU,IAAD,OACLC,KAAKC,SAAS,CAAEJ,IAAK,SACrBK,YAAW,WACT,EAAKD,SAAS,CAAEJ,IAAK,OACpB,SALP,8CAkBI,OACE,6BACE,4BAAQL,KAAK,SAASW,QAASH,KAAKF,KAAML,UAAU,kBAApD,YAGA,yBAAKA,UAAU,qBAAqBW,KAAK,SACvC,4BAAKJ,KAAKJ,MAAMC,WAxB1B,GAA6BQ,a,OCJd,aAAO,IAAD,EACWC,mBAAS,IADpB,mBACZC,EADY,KACHC,EADG,OAEeF,oBAAS,GAFxB,mBAEZG,EAFY,KAEDC,EAFC,KAqBnB,OAbAC,qBAAU,WACR,IAAIC,EAOJ,OANIH,IACFG,EAAUV,YAAW,WACnBM,EAAW,IACXE,GAAa,KACZ,MAEE,WACLE,GAAWC,aAAaD,OAK1B,oCACE,6BACE,4BAAQpB,KAAK,SAASW,QArBf,WACXK,EAAW,OACXE,GAAa,IAmB4BjB,UAAU,kBAA/C,YAGA,yBAAKA,UAAU,qBAAqBW,KAAK,SACvC,4BAAKG,OCTAO,MAhBf,WACE,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,iCACb,8CACA,kBAACsB,EAAD,OAEF,kBAAC,EAAD,MACA,6BACA,kBAACC,EAAD,SCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,a","file":"static/js/main.620ba684.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => (\n  <button type=\"button\" className=\"btn btn-dark\">\n    Zaloguj\n  </button>\n);","import React, { Component } from \"react\";\n\ntype CounterState = {\n  msg: string;\n};\n\ninterface IProps {}\n\nexport class Counter extends Component<{}, CounterState> {\n  boom() {\n    this.setState({ msg: \"BUM!\" });\n    setTimeout(() => {\n      this.setState({ msg: \"\" });\n    }, 2000);\n  }\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      msg: \"\",\n    };\n    this.boom = this.boom.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <button type=\"button\" onClick={this.boom} className=\"btn btn-danger\">\n          Detonuj!\n        </button>\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <h3>{this.state.msg}</h3>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nexport default () => {\n  const [message, setMessage] = useState('');\n  const [isClosing, setIsClosing] = useState(false);\n  const boom = () => {\n    setMessage('BUM');\n    setIsClosing(true);\n  };\n\n  useEffect(() => {\n    let timerID: NodeJS.Timeout;\n    if (isClosing) {\n      timerID = setTimeout(() => {\n        setMessage('');\n        setIsClosing(false);\n      }, 2000);\n    }\n    return () => {\n      timerID && clearTimeout(timerID);\n    };\n  });\n\n  return (\n    <>\n      <div>\n        <button type=\"button\" onClick={boom} className=\"btn btn-danger\">\n          Detonuj!\n        </button>\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <h3>{message}</h3>\n        </div>\n      </div>\n    </>\n  );\n};\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Login from './Components/Login';\nimport { Counter } from './Components/Counter';\nimport BetterCounter from './Components/BetterCounter';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-xl\">\n        <nav className=\"navbar navbar-dark bg-primary\">\n          <h3>Hello World :D</h3>\n          <Login />\n        </nav>\n        <Counter />\n        <hr></hr>\n        <BetterCounter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}